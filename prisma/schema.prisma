generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id           String       @id @default(cuid())
  name         String
  cnpj         String?      @unique
  cpf          String?      @unique
  email        String?
  telefone     String?
  endereco     String?
  ativo        Boolean      @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  entradas     Entrada[]
  estoques     Estoque[]
  farms        Farm[]
  fornecedores Fornecedor[]
  produtos     Produto[]
  saidas       Saida[]
  talhoes      Talhao[]
  users        User[]

  @@map("companies")
}

model User {
  id           String       @id @default(cuid())
  name         String
  email        String       @unique
  password     String
  avatarUrl    String?
  role         Role         @default(USER)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  companyId    String?
  company      Company?     @relation(fields: [companyId], references: [id])
  entradas     Entrada[]
  farms        Farm[]
  fornecedores Fornecedor[]
  produtos     Produto[]
  saidas       Saida[]
  talhoes      Talhao[]

  @@map("users")
}

model Farm {
  id        String   @id @default(cuid())
  name      String
  area      Float?
  companyId String
  userId    String?
  company   Company  @relation(fields: [companyId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
  talhoes   Talhao[]

  @@map("farms")
}

model Talhao {
  id          String   @id @default(cuid())
  nome        String
  descricao   String?
  area        Float?
  localizacao String?
  ativo       Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  companyId   String?
  userId      String?
  farmId      String?
  saidas      Saida[]
  company     Company? @relation(fields: [companyId], references: [id])
  farm        Farm?    @relation(fields: [farmId], references: [id])
  user        User?    @relation(fields: [userId], references: [id])

  @@map("talhoes")
}

model Fornecedor {
  id        String    @id @default(cuid())
  nome      String
  cnpj      String?   @unique
  cpf       String?   @unique
  email     String?
  telefone  String?
  endereco  String?
  ativo     Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  companyId String?
  userId    String?
  entradas  Entrada[]
  company   Company?  @relation(fields: [companyId], references: [id])
  user      User?     @relation(fields: [userId], references: [id])

  @@map("fornecedores")
}

model Produto {
  id           String    @id @default(cuid())
  nome         String
  descricao    String?
  unidade      String
  categoria    String?
  codigoBarras String?   @unique
  ativo        Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  companyId    String?
  userId       String?
  entradas     Entrada[]
  estoques     Estoque?
  company      Company?  @relation(fields: [companyId], references: [id])
  user         User?     @relation(fields: [userId], references: [id])
  saidas       Saida[]

  @@map("produtos")
}

model Entrada {
  id            String      @id @default(cuid())
  tipo          TipoEntrada
  quantidade    Float
  valorUnitario Float?
  valorTotal    Float?
  numeroNota    String?
  observacoes   String?
  dataEntrada   DateTime    @default(now())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  companyId     String?
  userId        String?
  produtoId     String
  fornecedorId  String?
  company       Company?    @relation(fields: [companyId], references: [id])
  fornecedor    Fornecedor? @relation(fields: [fornecedorId], references: [id])
  produto       Produto     @relation(fields: [produtoId], references: [id])
  user          User?       @relation(fields: [userId], references: [id])

  @@map("entradas")
}

model Saida {
  id          String    @id @default(cuid())
  tipo        TipoSaida
  quantidade  Float
  observacoes String?
  dataSaida   DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  companyId   String?
  userId      String?
  produtoId   String
  talhaoId    String?
  company     Company?  @relation(fields: [companyId], references: [id])
  produto     Produto   @relation(fields: [produtoId], references: [id])
  talhao      Talhao?   @relation(fields: [talhaoId], references: [id])
  user        User?     @relation(fields: [userId], references: [id])

  @@map("saidas")
}

model Estoque {
  id                String   @id @default(cuid())
  quantidade        Float    @default(0)
  quantidadeMinima  Float?
  valorMedio        Float?
  ultimaAtualizacao DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  companyId         String?
  produtoId         String   @unique
  company           Company? @relation(fields: [companyId], references: [id])
  produto           Produto  @relation(fields: [produtoId], references: [id])

  @@map("estoques")
}

enum Role {
  USER
  ADMIN
}

enum TipoEntrada {
  COMPRA
  TRANSFERENCIA_POSITIVA
}

enum TipoSaida {
  APLICACAO
  TRANSFERENCIA_NEGATIVA
}
